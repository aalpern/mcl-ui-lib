;; -*- mode:lisp; -*-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; file: 	ui-lib-ift.lisp;; author: 	Adam Alpern <aalpern@hampshire.edu>;; created: 	7/12/1995;;;; Code to let you edit UI-LIB dialog-items with IFT. Requires that;; Interface Tools be loaded prior to evaluating this file.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Revision History;; ----------------;; 7/12/95	- file created;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#-new-ift-palette(when (< *screen-height* 624)  (setf ift::*item-palette-size* #@(200 200)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; add 'em to the palette;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;#|(interface-tools::add-editable-dialog-item (make-instance '3d-scrolling-fred-view                                             :view-size #@(60 60)                                             :view-font '("Geneva" 9 :plain)                                             )                                           #+new-ift-palette :UI-LIB)|#(interface-tools::add-editable-dialog-item (make-instance '3d-sequence-dialog-item                                             :view-size #@(20 60)                                             :table-hscrollp nil                                             :table-vscrollp nil                                             :view-font '("Geneva" 9 :plain)                                             )                                           #+new-ift-palette :UI-LIB)(interface-tools::add-editable-dialog-item (make-instance '3d-editable-text-dialog-item                                             :view-size #@(60 20)                                             :view-font '("Geneva" 9 :plain)                                             :dialog-item-text "3D Edit Text"                                             )                                           #+new-ift-palette :UI-LIB)(interface-tools::add-editable-dialog-item (make-instance '3d-pad                                             :view-size #@(40 40)                                             )                                           #+:new-ift-palette :UI-LIB)(interface-tools::add-editable-dialog-item (make-instance '3d-horizontal-line-dialog-item                                             :view-size #@(80 2)                                             )                                           #+:new-ift-palette :UI-LIB)(interface-tools::add-editable-dialog-item (make-instance '3d-button-dialog-item                                             :view-size #@(60 20)                                             :view-font '("Geneva" 9 :plain)                                             :dialog-item-text "3D Button")                                           #+:new-ift-palette :UI-LIB)(interface-tools::add-editable-dialog-item (make-instance '3d-title-box-dialog-item                                             :view-size #@(60 40)                                             :view-font '("Geneva" 9 :plain)                                             :dialog-item-text "Title Box"                                             :3d-p nil                                             :frame-color *dark-gray-color*                                             :frame-pat *black-pattern*                                             )                                           #+:new-ift-palette :UI-LIB);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod interface-tools::object-source-code ((item ccl::basic-editable-text-dialog-item))  (nconc (call-next-method)         `(:draw-outline ,(slot-value  item 'ccl::draw-outline)           )))(defmethod ift::add-editor-items :after ((button ccl::basic-editable-text-dialog-item)                                         editor)  (let ((position ift::*editor-items-start-pos*))    (add-subviews     editor     (MAKE-DIALOG-ITEM 'button-dialog-item                       (add-points position #@(0 150)) #@(140 20)                       "Set Outline Inset"                       #'(lambda (b)                           (declare (ignore b))                           (let ((new-width                                   (read-from-string                                   (get-string-from-user "Please enter a number:")                                   nil nil)))                             (when (numberp new-width)                               (setf (slot-value button 'ccl::draw-outline) new-width)                               (view-focus-and-draw-contents button))))                       ))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod interface-tools::object-source-code ((item ccl::3d-pad))  (nconc (call-next-method)         `(:shadow-position ,(ccl::shadow-position item))         ))(defmethod ift::add-editor-items :after ((icon 3d-pad) editor)  (let ((position ift::*editor-items-start-pos*))    (add-subviews     editor     (MAKE-DIALOG-ITEM 'RADIO-BUTTON-DIALOG-ITEM                       position #@(120 16)                       "Raised"                       #'(lambda (item)                           (when (radio-button-pushed-p item)                             (setf (ccl::shadow-position icon) :botright)                             (view-focus-and-draw-contents icon))) ; change name?                       :view-nick-name :quit                       :RADIO-BUTTON-PUSHED-P nil                       :RADIO-BUTTON-CLUSTER 1)     (MAKE-DIALOG-ITEM 'RADIO-BUTTON-DIALOG-ITEM                       (add-points position #@(0 25)) #@(120 16)                       "Lowered"                       #'(lambda (item)                           (when (radio-button-pushed-p item)                             (setf (ccl::shadow-position icon) :topleft)                             (view-focus-and-draw-contents icon)))                       :radio-button-pushed-p t                       :RADIO-BUTTON-CLUSTER 1)     (make-dialog-item 'check-box-dialog-item                       (add-points position #@(0 50)) #@(155 16) "Frame"                       #'(lambda (item)                           (if (check-box-checked-p item)                             (setf (ccl::frame? icon) t)                             (setf (ccl::frame? icon) nil))                           (invalidate-view icon))                       :check-box-checked-p nil)     (make-dialog-item 'button-dialog-item                       (add-points position #@(0 75)) #@(155 18) "Set 3D Color"                       #'(lambda (item)                           (declare (ignore item))                           (let* ((bg (user-pick-color :color (ccl::bg-color icon)))                                  (3c (3d-colors bg)))                             (setf (ccl::frame-colors icon)                                    (cdr 3c))                             (set-part-color icon :body bg)                           (invalidate-view icon)))                       )     )))#|(interface-tools::add-editable-dialog-item (make-instance 'ccl::3d-pop-up-menu                                             :view-size #@(60 16)                                             :view-font '("Geneva" 9 :plain)                                             :item-display "item 1"))(interface-tools::add-editable-dialog-item (make-instance 'ccl::alt-3d-pop-up-menu                                             :view-size #@(60 16)                                             :view-font '("Geneva" 9 :plain)                                             :item-display "item 1"))|#;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 3d-button-dialog-item(defmethod interface-tools::object-source-code ((item 3d-button-dialog-item))  (nconc (call-next-method)         `(           :square-p ,(ccl::square-p item)           :inset? ,(ccl::inset? item)           :frame? ,(ccl::frame? item)           :oval-height ,(ccl::oval-height item)           :oval-width ,(ccl::oval-width item)           :colors ',(ccl::colors item)           :hilited-colors ',(ccl::hilited-colors item)           )))(defmethod ift::add-editor-items :after ((button 3d-button-dialog-item) editor)  (let ((checked (ccl::square-p button))        (position ift::*editor-items-start-pos*)        (default (default-button-p button)))    (add-subviews     editor     (make-dialog-item 'check-box-dialog-item                       (add-points position #@(0 75)) #@(116 16) "Default Button"                       #'(lambda (item)                           (let ((checked (check-box-checked-p item))                                 (dialog (view-window button))                                 (old-editor (ift::get-dialog-item-editor button)))                             (setf (ift::get-dialog-item-editor button) nil)                             (if checked                               (set-default-button dialog button)                               (set-default-button dialog nil))                             (setf (ift::get-dialog-item-editor button) old-editor)                             (invalidate-view button)))                       :check-box-checked-p default)     (make-dialog-item 'check-box-dialog-item                       position #@(155 16) "Square"                       #'(lambda (item)                           (if (check-box-checked-p item)                             (setf (ccl::square-p button) t)                             (setf (ccl::square-p button) nil))                           (invalidate-view button))                       :check-box-checked-p checked)     (make-dialog-item 'check-box-dialog-item                       (add-points position #@(0 25)) #@(155 16) "Frame"                       #'(lambda (item)                           (if (check-box-checked-p item)                             (setf (ccl::frame? button) t)                             (setf (ccl::frame? button) nil))                           (invalidate-view button))                       :check-box-checked-p (ccl::frame? button))     (make-dialog-item 'check-box-dialog-item                       (add-points position #@(0 50)) #@(155 16) "Inset"                       #'(lambda (item)                           (if (check-box-checked-p item)                             (setf (ccl::inset? button) t)                             (setf (ccl::inset? button) nil))                           (invalidate-view button))                       :check-box-checked-p (ccl::inset? button))     (make-dialog-item 'check-box-dialog-item                       (add-points position #@(0 100)) #@(155 16) "Embossed Text"                       #'(lambda (item)                           (if (check-box-checked-p item)                             (setf (ccl::embossed? button) t)                             (setf (ccl::embossed? button) nil))                           (invalidate-view button))                       :check-box-checked-p (ccl::embossed? button))     (MAKE-DIALOG-ITEM 'button-dialog-item                       (add-points position #@(0 125)) #@(140 20)                       "Set Oval Height"                       #'(lambda (b)                           (declare (ignore b))                           (let ((new-width                                   (read-from-string                                   (get-string-from-user "Please enter a number:")                                   nil nil)))                             (when (numberp new-width)                               (setf (ccl::oval-height button) new-width)                               (view-focus-and-draw-contents button))))                       )     (MAKE-DIALOG-ITEM 'button-dialog-item                       (add-points position #@(0 150)) #@(140 20)                       "Set Oval Width"                       #'(lambda (b)                           (declare (ignore b))                           (let ((new-width                                   (read-from-string                                   (get-string-from-user "Please enter a number:")                                   nil nil)))                             (when (numberp new-width)                               (setf (ccl::oval-width button) new-width)                               (view-focus-and-draw-contents button))))                       )     (MAKE-DIALOG-ITEM 'button-dialog-item                       (add-points position #@(0 175)) #@(140 20)                       "Set Frame Width"                       #'(lambda (b)                           (declare (ignore b))                           (let ((new-width                                   (read-from-string                                   (get-string-from-user "Please enter a number:")                                   nil nil)))                             (when (numberp new-width)                               (setf (ccl::frame-width button) new-width)                               (view-focus-and-draw-contents button))))                       ))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; banner-dialog-item#|(interface-tools::add-editable-dialog-item (make-instance 'banner-dialog-item                                             :view-size #@(60 18)                                             :view-font '("Geneva" 9 :plain)                                             :dialog-item-text "Banner"                                             :part-color-list `(:text ,*white-color*)                                             :color *dark-gray-color*))|#(defmethod ift::add-editor-items :after ((icon banner-dialog-item) editor)  (let ((position ift::*editor-items-start-pos*))        (add-subviews     editor     (MAKE-DIALOG-ITEM 'RADIO-BUTTON-DIALOG-ITEM                       position #@(120 16)                       "No Border"                       #'(lambda (item)                           (when (radio-button-pushed-p item)                             (setf (draw-outline icon) nil)                             (view-focus-and-draw-contents icon))) ; change name?                       :view-nick-name :quit                       :RADIO-BUTTON-PUSHED-P nil                       :RADIO-BUTTON-CLUSTER 1)     (MAKE-DIALOG-ITEM 'RADIO-BUTTON-DIALOG-ITEM                       (add-points position #@(0 25)) #@(120 16)                       "Sunken Border"                       #'(lambda (item)                           (when (radio-button-pushed-p item)                             (setf (draw-outline icon) :topleft)                             (view-focus-and-draw-contents icon)))                       :radio-button-pushed-p t                       :RADIO-BUTTON-CLUSTER 1)     (MAKE-DIALOG-ITEM 'RADIO-BUTTON-DIALOG-ITEM                       (add-points position #@(0 50)) #@(120 16)                                   "Raised Border"                                   #'(lambda (item)                                       (when (radio-button-pushed-p item)                                         (setf (draw-outline icon) :botright)                                         (view-focus-and-draw-contents icon)))                                   :RADIO-BUTTON-CLUSTER 1)     (MAKE-DIALOG-ITEM 'RADIO-BUTTON-DIALOG-ITEM                       (add-points position #@(0 75)) #@(120 16)                                   "Plain Border"                                   #'(lambda (item)                                       (when (radio-button-pushed-p item)                                         (setf (draw-outline icon) t)                                         (view-focus-and-draw-contents icon)))                                   :RADIO-BUTTON-CLUSTER 1)               )))(defmethod interface-tools::object-source-code ((item banner-dialog-item))  (nconc (call-next-method)         `(:draw-outline ,(draw-outline item))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 3d-title-box-dialog-item(defmethod interface-tools::object-source-code ((item 3d-title-box-dialog-item) )  (nconc (call-next-method)         `(:3d-p ,(ccl::3d-p item))))(defmethod ift::add-editor-items :after ((button 3d-title-box-dialog-item) editor)  (let ((checked (ccl::3d-p button))        (position ift::*editor-items-start-pos*))    (add-subviews     editor     (make-dialog-item 'check-box-dialog-item                       position #@(155 16) "3D"                       #'(lambda (item)                           (if (check-box-checked-p item)                             (setf (ccl::3d-p button) t)                             (setf (ccl::3d-p button) nil))                           (invalidate-view button))                       :check-box-checked-p checked)          (MAKE-DIALOG-ITEM 'RADIO-BUTTON-DIALOG-ITEM                       (add-points position #@(0 25)) #@(120 16)                       "Solid Frame"                       #'(lambda (item)                           (when (radio-button-pushed-p item)                             (setf (ccl::frame-pat button) *black-pattern*)                             (view-focus-and-draw-contents button)))                       :radio-button-pushed-p t                       :RADIO-BUTTON-CLUSTER 1)     (MAKE-DIALOG-ITEM 'RADIO-BUTTON-DIALOG-ITEM                       (add-points position #@(0 50)) #@(120 16)                                   "Dotted Frame"                                   #'(lambda (item)                                       (when (radio-button-pushed-p item)                                         (setf (ccl::Frame-pat button) *gray-pattern*)                                         (view-focus-and-draw-contents button)))                                   :RADIO-BUTTON-CLUSTER 1)     )))(defmethod ift::add-editor-items :after ((item ccl::3d-frame-mixin) editor)  (let ((position ift::*editor-items-start-pos*))    (add-subviews     editor     (MAKE-DIALOG-ITEM 'button-dialog-item                       (add-points position #@(0 175)) #@(140 20)                       "Set Frame Width"                       #'(lambda (b)                           (declare (ignore b))                           (let ((new-width                                   (read-from-string                                   (get-string-from-user "Please enter a number:")                                   nil nil)))                             (when (numberp new-width)                               (setf (ccl::frame-width item) new-width)                               (view-focus-and-draw-contents item))))                       )     )));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; progress-indicator(defmethod interface-tools::object-source-code ((item progress-indicator))  (nconc (call-next-method)         `(:value ,(value item)                  :maximum ,(maximum item)                  :minimum ,(minimum item))))(interface-tools::add-editable-dialog-item (make-instance 'arc-progress-indicator                                             :view-size #@(20 20 )                                             :value 15                                             )                                           #+:new-ift-palette :UI-LIB)#|(interface-tools::add-editable-dialog-item (make-instance 'bar-progress-indicator                                             :direction :horizontal                                             :view-size #@(100 14)                                             :value 15                                             ))|#(defmethod ift::add-editor-items :after ((item progress-indicator) editor)  (let ((position ift::*editor-items-start-pos*))    (add-subviews     editor     (MAKE-DIALOG-ITEM 'button-dialog-item                       position                       #@(140 20)                       "Set Minimum"                       #'(lambda (b)                           (declare (ignore b))                           (let ((new-min                                   (read-from-string                                   (get-string-from-user "Please enter a number:")                                   nil nil)))                             (when (numberp new-min)                               (setf (minimum item) new-min)                               (view-focus-and-draw-contents item))))                       )     (MAKE-DIALOG-ITEM 'button-dialog-item                       (add-points position #@(0 25))                       #@(140 20)                       "Set Maximum"                       #'(lambda (b)                           (declare (ignore b))                           (let ((new-max                                   (read-from-string                                   (get-string-from-user "Please enter a number:")                                   nil nil)))                             (when (numberp new-max)                               (setf (maximum item) new-max)                               (view-focus-and-draw-contents item))))                       )     (MAKE-DIALOG-ITEM 'button-dialog-item                       (add-points position #@(0 50))                       #@(140 20)                       "Set Value"                       #'(lambda (b)                           (declare (ignore b))                           (let ((new-val                                   (read-from-string                                   (get-string-from-user "Please enter a number:")                                   nil nil)))                             (when (numberp new-val)                               (setf (value item) new-val)                               (view-focus-and-draw-contents item))))                       )     )))