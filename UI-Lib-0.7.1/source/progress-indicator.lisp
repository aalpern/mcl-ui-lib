;; -*- mode:lisp; -*-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; system:	U I - L I B;;;; file: 	progress-indicator.lisp;; author: 	Adam Alpern <aalpern@hampshire.edu>;; created: 	11/9/1995;;;; Copyright © 1995 Adam Alpern;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Revision History;; ----------------;; 11/9/1995	- file created;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(declaim (ignore ignore))(defparameter *progress-indicator-default-done-color* (make-color #x4000 #x4000 #x4000))(defparameter *progress-indicator-default-todo-color* (make-color #xcccc #xcccc #xffff))(defclass progress-indicator (dialog-item)  ((done-color :initarg :done-color :initform *progress-indicator-default-done-color*               :accessor done-color)   (todo-color :initarg :todo-color :initform *progress-indicator-default-todo-color*               :accessor todo-color)   (minimum :initarg :minimum :initform 0   :accessor minimum)   (maximum :initarg :maximum :initform 100 :accessor maximum)   (value   :initarg :value   :initform 0   :accessor value)))(defgeneric set-value (item value))(defmethod set-value ((item progress-indicator) value)  (setf (value item) value))(defmethod set-value :after ((item progress-indicator) ignore)  (view-focus-and-draw-contents item))(defclass bar-progress-indicator (progress-indicator)   ((direction :initarg :direction :initform :horizontal :accessor direction)))(defclass arc-progress-indicator (progress-indicator) ())(defmethod view-draw-contents ((item bar-progress-indicator))  (with-focused-view item    (with-slots (maximum minimum direction value) item    (let ((length (- maximum minimum)))      ;(ccl::with-item-rect (r item)      (rlet ((r :rect :topleft 0                :bottomright (view-size item))             (todo-rect :rect :topleft 0                        :bottomright (view-size item)))        (with-fore-color *black-color*          (#_framerect r))                (#_insetrect r 1 1)        (#_insetrect todo-rect 1 1)                  ; simple bounds check          (cond ((> value maximum)                 (setf value maximum))                ((< value minimum)                 (setf value minimum)))                    (unless (zerop length)            (case direction              (:vertical                (rset r :rect.top                     (- (rref r :rect.bottom)                        (/ (* (- value minimum)                              (- (rref r :rect.bottom)                                 (rref r :rect.top)))                           length))))              (:horizontal               (rset r :rect.right                     (+ (rref r :rect.left)                        (/ (* (- value minimum)                              (- (rref r :Rect.right)                                 (rref r :rect.left)))                           length))))))                    (with-fore-color (done-color item)            (#_paintrect r))                    (case direction            (:vertical (rset todo-rect :rect.bottom (rref r :rect.top)))            (:horizontal (rset todo-rect :rect.left (rref r :rect.right))))                    (with-fore-color (todo-color item)            (#_paintrect todo-rect)))))))  (defmethod view-draw-contents ((item arc-progress-indicator))  (ccl::with-item-rect (r item)    (with-fore-color *black-color*      (#_frameoval r))    (#_insetrect r 1 1)    (let* ((length (- (maximum item) (minimum item)))           (done (- length (value item)))           done-arc-degree todo-arc-degree)      (if (zerop done)        (setf done-arc-degree 0)        (setf done-arc-degree (- 360 (* 360 (/ 1 (/ length done))))))      (setf todo-arc-degree (- 360 done-arc-degree))      (with-fore-color (done-color item)        (#_paintarc r 0 done-arc-degree))      (with-fore-color (todo-color item)        (#_paintarc r done-arc-degree todo-arc-degree)))))#|; vertdoneRect.top =  doneRect.bottom - ((controlValue - contrlMin) *  (doneRect.bottom - doneRect.top)) / length;					(rset r :rect.top      (- (rref r :rect.bottom)         (/ (* (- value minimum)               (- (rref r :rect.bottom)                  (rref r :rect.top)))            length)))OR(rset r :rect.top      (/ (- (rref r :rect.bottom)            (* (- minimum value)               (- (rref r :rect.bottom)                  (rref r :rect.top))))         length)); horizdoneRect.right = doneRect.left + ((controlValue - contrlMin) * (doneRect.right - doneRect.left)) / length;(rset r :rect.right      (+ (rref r :rect.left)         (/ (* (- value minimum)               (- (rref r :Rect.right)                  (rref r :rect.left)))            length)))      OR(rset r :rect.right      (/ (+ (rref r :rect.left)            (* (- value minimum)               (- (rref r :Rect.right)                  (rref r :rect.left))))         length))|#