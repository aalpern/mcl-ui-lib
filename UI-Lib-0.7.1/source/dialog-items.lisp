;; -*- mode:lisp; -*-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; system:	U I - L I B;;;; file: 	dialog-items.lisp;; author: 	Adam Alpern (ala@neural.hampshire.edu);; created: 	03/07/95;;;; Copyright © 1995 Adam Alpern;;;; Please send comments, improvements, or whatever to ala@neural.hampshire.edu.;; If you redistribute this file, please keep this header intact, and;; please send me any changes. I would like to know if you use this utility,;; and if you find it useful.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Revision History;; ----------------;; 07/09/96	- dialog-item-enable and dialog-item-disable for ;;		  cicn-dialog-item-mixin set icon transform.;; 04/05/96	- use ccl::graphic-item-mixin, instead of defining again;;		- merged in line-dialog-item.lisp (should integrate w/;;		  3d lines in 3ddrawing.lisp);; 04/03/96	- oops, cicn-button-dialog-item inherited from button-dim, which;;		  is now internal in CCL. fixed hilite-view too.;; 02/10/69	- tool-palette subclasses system-7.5-windoid;; 8/15/95	- color-swatch-mixin checks :body part-color to use;;		  as fill color before the color slot. This is now;;		  the recommended way to specify the color. The color slot;;		  may disappear soon.;; 8/5/95	- added draw-outline options to color-swatch, ;;		  added banner-dialog-item.;; 07/13/95	- added align and transform to cicn-dialog-item-mixin;; 03/07/95	- File created.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; thing:	cicn-dialog-item-mixin;;		cicn-dialog-item;; author:	Adam Alpern <ala@neural.hampshire.edu>;; synopsis:	Provides a class to be mixed-in with dialog-items, or ;;		other views that draws a color icon (resource type cicn) ;;		centered in the item.(defclass cicn-dialog-item-mixin ()  ((icon :initarg :icon :initform nil :accessor icon)   (icon-size :initarg :icon-size :initform #@(32 32)               :accessor icon-size)   #+ccl-3(align :initarg :align :initform #$atNone                  :accessor align)   #+ccl-3(transform :initarg :transform :initform #$ttNone              :accessor transform)   (offset :initarg :offset :initform #@(0 0) :accessor offset))  (:Default-initargs :view-size #@(32 32)))#+ccl-3 (defmethod dialog-item-disable :before ((item cicn-dialog-item-mixin))          (setf (transform item) #$ttDisabled))#+ccl-3 (defmethod dialog-item-enable :before ((item cicn-dialog-item-mixin))          (setf (transform item) #$ttNone))(defmethod calculate-icon-offset ((view cicn-dialog-item-mixin))  (let* ((off (subtract-points (view-size view)                               (icon-size view)))         (off-h (point-h off))         (off-v (point-v off))         (offset (make-point (truncate (/ off-h 2))                             (truncate (/ off-v 2)))))    offset))(defmethod (setf icon) :after (icon (view cicn-dialog-item-mixin))  "Invalidates item so that the new icon is drawn."  (declare (ignore icon))  (setf (offset view) (calculate-icon-offset view))  (invalidate-view view t))(defmethod initialize-instance :after ((view cicn-dialog-item-mixin) &rest args)  (declare (ignore args))  (when (icon view)    (unless (icon-size view)      (setf (icon-size view)             (make-point (ccl::cicn-width (icon view))                        (ccl::cicn-height (icon view)))))    (setf (offset view) (calculate-icon-offset view))))(defmethod set-view-size :after ((view cicn-dialog-item-mixin) h &optional v)  (declare (ignore h v))  (setf (offset view) (calculate-icon-offset view)))(defmethod view-draw-contents :after ((view cicn-dialog-item-mixin))  (when (icon view)    (with-focused-view view      (rlet ((r :rect                 :topleft (offset view)                 :bottomright (add-points (offset view) (icon-size view))))        (#_hlock (icon view))        #+ccl-3(#_plotCiconHandle r (align view) (transform view) (icon view))        #-ccl-3(#_plotCicon r (icon view))        (#_hunlock (icon view))        ))))(defclass cicn-dialog-item (cicn-dialog-item-mixin dialog-item) ());;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; thing:	color-swatch-mixin;;		color-swatch-dialog-item;;		color-swatch-picker-dialog-item;; author:	Adam Alpern <ala@neural.hampshire.edu>;; synopsis:	A simple mixin which frames itself and fills itself;;		with it's color. color-swatch-picker-dialog-item will;;		open the Apple color picker when clicked, and set it's;;		color to the user's choice.(defclass color-swatch-mixin ()  ((color :initarg :color :initform *dark-green-color* :accessor color)   (draw-outline :initarg :draw-outline :initform t :accessor draw-outline)   ))(defmethod view-draw-contents ((view color-swatch-mixin))  (rlet ((r :rect :topleft (view-position view)             :bottomright (add-points (view-position view) (view-size view))))    (with-fore-color (or (part-color view :body) (color view))      (#_FillRect r (if (dialog-item-enabled-p view)                      *black-pattern*                      *gray-pattern*)))    (when (draw-outline view)      (case (draw-outline view)        (:topleft (frame-rect-3d-with-standard-colors r 1 :topleft))        (:botright (frame-rect-3d-with-standard-colors r 1 :botright))        (t         (with-fore-color (or (part-color view :frame) 0)           (#_framerect r))))      )))(defmethod (setf color) :after (color (item color-swatch-mixin))  "Invalidates item so that the new icon is drawn."  (declare (ignore color))  (invalidate-view item t))(defclass color-swatch-dialog-item (color-swatch-mixin dialog-item) ())(defclass color-swatch-picker-dialog-item (color-swatch-mixin dialog-item) ())(defmethod view-click-event-handler ((view color-swatch-picker-dialog-item)                                     where)  (declare (ignore where))  (setf (color view) (user-pick-color :color (color view))))(defclass banner-dialog-item (color-swatch-mixin dialog-item)   ())(defmethod view-draw-contents :after ((view banner-dialog-item))  (draw-centered-text view (dialog-item-text view)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass label (dialog-item) ())(defmethod view-draw-contents ((view label))  (with-font-focused-view     view (view-font view)    (with-pstrs ((s (dialog-item-text view)))      (multiple-value-bind (ascent descent max-width leading)                           (font-info (view-font view))        (declare (ignore max-width))        (#_MoveTo 0 (+ ascent descent leading))        (#_DrawString s)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; thing:	cicn-check-box-dialog-item;; synopsis:	(defclass cicn-check-box-dialog-item (Cicn-Dialog-Item-Mixin dialog-item)  ((icon-list :initarg :icon-list :initform nil :accessor icon-list)   (check-box-checked-p :initarg :check-box-checked-p                        :initform nil :accessor check-box-checked-p)   ))(defmethod initialize-instance :after ((item cicn-check-box-dialog-item)                                       &rest args)  (declare (ignore args))  (if (check-box-checked-p item)    (setf (icon item) (second (icon-list item)))    (setf (icon item) (first (icon-list item)))))(defmethod check-box-check ((item cicn-check-box-dialog-item))  (setf (check-box-checked-p item) t)  (setf (icon item) (second (icon-list item)))  ;(invalidate-view item)  )(defmethod check-box-uncheck ((item cicn-check-box-dialog-item))  (setf (check-box-checked-p item) nil)  (setf (icon item) (first (icon-list item)))  ;(invalidate-view item)  )(defmethod view-click-event-handler ((item cicn-check-box-dialog-item) where)  (declare (ignore where))  (if (check-box-checked-p item)    (check-box-uncheck item)    (check-box-check item)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; thing:	cicn-button-dialog-item;; synopsis:	(defclass Cicn-Button-Dialog-Item (ccl::button-mixin Cicn-Dialog-Item-Mixin                                                          dialog-item)  ((icon-list :initarg :icon-list :initform nil :accessor icon-list)))(defmethod ccl::hilite-view ((item cicn-button-dialog-item) hilite-flag)  (if hilite-flag    (setf (icon item) (second (icon-list item)))    (setf (icon item) (first (icon-list item))))  (view-draw-contents item));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass label (dialog-item) ())(defmethod view-draw-contents ((view label))  (erase-rect view #@(0 0) (view-size view))   (with-font-focused-view     view (view-font view)    (with-pstrs ((s (dialog-item-text view)))      (multiple-value-bind (ascent descent max-width leading)                           (font-info (view-font view))        (declare (ignore max-width))        (#_MoveTo 0 (+ ascent descent leading))        (#_DrawString s)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass frame-selected-dialog-item-mixin ()  ((selected-p :initarg :selected-p :initform nil :accessor selected-p)))(defmethod view-draw-contents :after ((di frame-selected-dialog-item-mixin))  (when (selected-p di)    (with-pen-saved      (with-fore-color *black-color*        (ccl::with-item-rect (r di)          (#_InsetRect r -4 -4)          (#_PenSize 2 2)          (#_FrameRect r))))))(defmethod draw-frame ((di dialog-item) &key (width 2)                       (color *black-color*)                       (mode :patCopy))  (with-pen-saved    (with-fore-color color      (ccl::with-item-rect (r di)        (#_InsetRect r (- (* width 2)) (- (* width 2)))        (#_PenMode (ccl::mode-arg mode))        (#_PenSize width width)        (#_FrameRect r)))))(defmethod erase-frame ((di dialog-item) &key (width 2))  (draw-frame di :width width :mode :patXor))(defmethod select ((di frame-selected-dialog-item-mixin))  (setf (selected-p di) t)  (draw-frame di))(defmethod deselect ((di frame-selected-dialog-item-mixin))  (setf (selected-p di) nil)  (erase-frame di))  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Tool Palettes;;;; Revision History;; ----------------;; 2/10/96	- oops! cicn-3d-button-dialog-item doesn't exist anymore. ;; 10/2/95	- moved into dialog-items.lisp;; 7/ 6/95 	- removed icon-list.;;		- removed tool class. Use tool-dialog-item instead.;;		- oops! all the methods were on tool, not tool-dialog-item.;;		  fixed.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; thing:	tool-palette;;		tool-dialog-item;;;;		NOTE: view-click-event-handler for tool assumes that the;;		tool is installed in a tool-palette.;;(defclass tool-palette (system-7.5-windoid)   ((selected-tool :initarg :selected-tool :initform nil                   :accessor selected-tool)))(defclass tool-dialog-item (3d-button-dialog-item)  ((tool-selected-p :initarg :tool-selected-p :initform nil :accessor                    tool-selected-p)   (name :initarg :name :initform (gensym "tool-") :accessor name)))(defmethod print-object ((tool tool-dialog-item) stream)  (format stream "#<tool:~a>" (name tool)))(defmethod tool-select ((tool tool-dialog-item))  (setf (tool-selected-p tool) 	t)  (invalidate-view tool))(defmethod tool-deselect ((tool tool-dialog-item))  (setf (tool-selected-p tool) 	nil)  (invalidate-view tool))(defmethod view-click-event-handler ((view tool-dialog-item) where)  (declare (ignore where))  (switch-tool (view-window view) view))(defmethod switch-tool ((p Tool-Palette) (new-tool tool-dialog-item))  (tool-deselect-handler (selected-tool p))  (tool-deselect (selected-tool p))  (tool-select new-tool)  (setf (selected-tool p) new-tool)  (tool-select-handler new-tool));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defgeneric tool-select-handler (tool))(defgeneric tool-deselect-handler (tool))(defmethod tool-select-handler ((tool tool-dialog-item))  (setf (ccl::shadow-position tool) :topLeft        (ccl::hilited-p tool) t))(defmethod tool-deselect-handler ((tool tool-dialog-item))  (setf (ccl::shadow-position tool) :botRight        (ccl::hilited-p tool) nil));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass icon-list-tool-dialog-item (tool-dialog-item)  ((icon-list :initarg :icon-list :initform nil :accessor icon-list)))(defmethod tool-select-handler :before ((tool icon-list-tool-dialog-item))  (setf (icon tool) (second (icon-list tool))))(defmethod tool-deselect-handler :before ((tool icon-list-tool-dialog-item))  (setf (icon tool) (first (icon-list tool))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; line-dialog-item (previously in line-dialog-item.lisp)(defmethod point-in-click-region-p ((item ccl::graphic-item-mixin) point)  (declare (ignore point))  nil)(defclass line-dialog-item (ccl::graphic-item-mixin dialog-item)   ((frame-width :initform 1 :accessor frame-width :initarg :frame-width)   (pattern :initarg :pattern :initform *black-pattern* :accessor pattern))  (:default-initargs :frame-width 1))(defclass horizontal-line-dialog-item (line-dialog-item) ())(defclass vertical-line-dialog-item (line-dialog-item) ())(defmethod view-draw-contents ((w line-dialog-item))  (multiple-value-bind (topLeft bottomRight)                       (view-corners w)    (with-fore-color (or (part-color w :frame)                         *black-color*)      (with-pen-saved        (#_penpat (pattern w))        (rlet ((r :rect :topLeft topLeft                  :bottomRight bottomRight))          (#_framerect r))))))(defmethod initialize-instance :after ((item horizontal-line-dialog-item)                                        &rest args)  (declare (ignore args))  (set-view-size item (make-point (point-h (or (view-size item) #@(50 50)))                                   (frame-width item))))(defmethod initialize-instance :after ((item vertical-line-dialog-item)                                        &rest args)  (declare (ignore args))  (set-view-size item (make-point (frame-width item))                 (point-v (or (view-size item) #@(50 50)))))#|(interface-tools::add-editable-dialog-item (make-instance 'vertical-line-dialog-item                                             :view-size #@(2 60)))(interface-tools::add-editable-dialog-item (make-instance 'horizontal-line-dialog-item                                             :view-size #@(60 2)))|#(defclass 3d-scrolling-fred-view (ccl::scrolling-fred-view 3d-field-mixin) ())