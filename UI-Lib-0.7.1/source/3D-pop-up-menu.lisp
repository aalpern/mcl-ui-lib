;; -*- mode:lisp; package:ccl -*-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; system:	U I - L I B;;;; file: 	3D-pop-up-menu.lisp;; author: 	Adam Alpern <aalpern@hampshire.edu>;; created: 	10/3/1995;;;; Copyright © 1995 Adam Alpern;;;; Please send comments, improvements, or whatever to address;; If you redistribute this file, please keep this header intact, and;; please send me any changes. I would like to know if you use this utility,;; and if you find it useful.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Revision History;; ----------------;; 11/11/95	- added alt-3d-pop-up-menu;;		- export 3D-POP-UP-MENU and ALT-3D-POP-UP-MENU;; 10/03/95	- file created;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(in-package :ccl)(export '(3D-POP-UP-MENU ALT-3D-POP-UP-MENU))(defclass 3D-pop-up-menu (pop-up-menu) ())(defclass alt-3D-pop-up-menu (pop-up-menu)   ())#+CCL-3(defmethod view-draw-contents ((menu 3D-pop-up-menu) &aux (items (menu-items menu)))  (let* (;(pos (view-position menu))         (text (menu-title menu)) ;(dialog-item-text menu))         (ti-rect (pop-up-menu-title-rect menu))         (no-title (equal text ""))         (item-display (pop-up-menu-item-display menu))         (enabled (menu-enabled-p menu))         (colorp (color-or-gray-p menu))         (pull-down-p (pull-down-menu-p menu)))    (with-focused-dialog-item (menu)  ; take font from item, draw in containers coords - this is the other thing that dialog item gives us    (multiple-value-bind (a d w leading)(view-font-codes-info menu)      (declare (ignore a))      (rlet ((a-rect :rect))        (copy-record (pop-up-menu-rect menu) :rect a-rect)        (let ((mi-title (cond ((eq item-display :selection)                                      (let ((selection (pop-up-menu-default-item menu)))                                        (cond ((null items) "<No Items>")                                              ((zerop selection) "<No selection>")                                              (t (menu-item-title                                                  (nth (- selection 1) items))))))                                     ((stringp item-display)                                      item-display)                                     (t                                       (format nil "~a" item-display)))))          (with-fore-color (if (and (not enabled) colorp)                             *gray-color*                             (part-color menu :menu-title)) ; 21-Jun-91 -wkf            (with-back-color (part-color menu :menu-body) ; 10-Nov-92 -straz              (unless no-title                (#_EraseRect :ptr ti-rect)                (#_MoveTo :word (+ (rref ti-rect rect.left) 3) ; (+ (point-h pos) 3)                 :word (- (rref ti-rect rect.bottom) (+ d leading)))                (with-pstrs ((di-title text))                  (#_DrawString :ptr di-title)))              ;  (#_OffsetRect :ptr a-rect :long #@(0 -1))              (with-fore-color $light-gray2                (#_FillRect :ptr a-rect :ptr *black-pattern*))              (cond ((not pull-down-p)                     (#_FrameRect :ptr a-rect)                     (#_insetrect a-rect 1 1)                     (frame-rect-3d-with-standard-colors a-rect 1 :botright)                     (#_insetrect a-rect -1 -1)                     (#_MoveTo :word (+ (rref a-rect rect.left) 3)                      :word (rref a-rect rect.bottom))                     (#_LineTo :word (rref a-rect rect.right)                      :word (rref a-rect rect.bottom))                     (#_LineTo :word (rref a-rect rect.right)                      :word (+ (rref a-rect rect.top) 2)))                    ((crescent menu)                     (let ((tl (rref a-rect rect.topleft)))                       (#_moveto :long tl)                       (dolist (length '(5 3 2 1 0 0))                         (#_line :word length :word 0)                         (#_move :word (- length) :word 1)))))                                                     (#_InsetRect :ptr a-rect :long #@(1 1))              (let* ((left (+ (rref a-rect rect.left)(if pull-down-p 6 (max 6 w))))                     (right (rref a-rect rect.right))                     (bottom (rref a-rect rect.bottom)))                (#_MoveTo :word left :word  (- bottom (+ leading 1 d)))                (with-clip-rect-intersect a-rect                  (draw-string-crop mi-title (- right left (if pull-down-p 0 12)))                  (#_MoveTo :word (- right (+ 4 11))                   :word (- (ash (+ bottom (rref a-rect :rect.top)) -1)                            2)))                ; Draw the little triangle.                (unless pull-down-p                  (draw-triangle menu)))))))                       (unless (or enabled colorp)        (rlet ((ps :penstate))          (with-item-rect (rect menu)            (#_InsetRect :ptr rect :long #@(0 -1))            (#_GetPenState :ptr ps)            (#_PenPat :ptr *gray-pattern*)            (#_PenMode :word 11)            (#_PaintRect :ptr rect)            (unless no-title (#_PaintRect ti-rect)) ; ??            (#_SetPenState :ptr ps))))))))                        ; this makes regular pop-ups draw the drop-shadow properly#-CCL-3(let ((*warn-if-redefine-kernel* nil))  (defmethod view-draw-contents ((menu pop-up-menu) &aux (items (menu-items menu)))  (let* ((pos (view-position menu))         (text (dialog-item-text menu))         (ti-rect (pop-up-menu-title-rect menu))         (item-display (pop-up-menu-item-display menu)))    (rlet ((a-rect :rect))      (copy-record (pop-up-menu-rect menu) :rect a-rect)      (with-pstrs ((mi-title (if (eq item-display :selection)                               (if items                                 (menu-item-title                                  (nth (- (pop-up-menu-default-item menu) 1)                                       items))                                 "<No Items>")                               (if (stringp item-display)                                 item-display                                 (format nil "~a" item-display)))))        (with-fore-color (part-color menu :menu-title) ; 21-Jun-91 -wkf          (with-back-color (part-color menu :menu-body) ; 10-Nov-92 -straz            (unless (equal text "")              (#_EraseRect :ptr ti-rect)              (#_MoveTo :word (+ (point-h pos) 3)               :word (- (rref a-rect rect.bottom) 8))              (with-pstrs ((di-title text))                (#_DrawString :ptr di-title)))            ;  (#_OffsetRect :ptr a-rect :long #@(0 -1))            (#_FrameRect :ptr a-rect)            (#_MoveTo :word (+ (rref a-rect rect.left) 3)             :word (rref a-rect rect.bottom))            (#_LineTo :word (rref a-rect rect.right)             :word (rref a-rect rect.bottom))            (#_LineTo :word (rref a-rect rect.right)             :word (+ (rref a-rect rect.top) 2))	; ***            (#_InsetRect :ptr a-rect :long #@(1 1))            (#_FillRect :ptr a-rect :ptr *white-pattern*)            (#_MoveTo :word (+ (rref a-rect rect.left) 3)             :word (- (rref a-rect rect.bottom) 5))            (with-clip-rect a-rect              (#_DrawString :ptr mi-title)              (#_MoveTo :word (- (rref a-rect :rect.right) (+ 4 11))               :word (- (ash (+ (rref a-rect :rect.bottom) (rref a-rect :rect.top)) -1)                        2))              ; Draw the little triangle.              (#_line :long #@(10 0))              (#_line :long #@(-5 5))              (#_line :long #@(-4 -4))              (#_line :long #@(7 0))              (#_line :long #@(-3 3))              (#_line :long #@(-2 -2))              (#_line :long #@(3 0))              (#_line :long #@(-1 1)))))))    (unless (dialog-item-enabled-p menu)      (rlet ((ps :penstate))        (with-item-rect (rect menu)          (#_InsetRect :ptr rect :long #@(0 -1))          (#_GetPenState :ptr ps)          (#_PenPat :ptr *gray-pattern*)          (#_PenMode :word 11)          (#_PaintRect :ptr rect)          (#_SetPenState :ptr ps)))))))#-CCL-3(defmethod view-draw-contents ((menu 3D-pop-up-menu) &aux (items (menu-items menu)))  (let* ((pos (view-position menu))         (text (dialog-item-text menu))         (ti-rect (pop-up-menu-title-rect menu))         (item-display (pop-up-menu-item-display menu)))    (rlet ((a-rect :rect))      (copy-record (pop-up-menu-rect menu) :rect a-rect)      (with-pstrs ((mi-title (if (eq item-display :selection)                               (if items                                 (menu-item-title                                  (nth (- (pop-up-menu-default-item menu) 1)                                       items))                                 "<No Items>")                               (if (stringp item-display)                                 item-display                                 (format nil "~a" item-display)))))        (with-fore-color (part-color menu :menu-title) ; 21-Jun-91 -wkf          (with-back-color (part-color menu :menu-body) ; 10-Nov-92 -straz            (unless (equal text "")              (#_EraseRect :ptr ti-rect)              (#_MoveTo :word (+ (point-h pos) 3)               :word (- (rref a-rect rect.bottom) 8))              (with-pstrs ((di-title text))                (#_DrawString :ptr di-title)))            ;  (#_OffsetRect :ptr a-rect :long #@(0 -1))            (#_FrameRect :ptr a-rect)            (#_MoveTo :word (+ (rref a-rect rect.left) 3)             :word (rref a-rect rect.bottom))            (#_LineTo :word (rref a-rect rect.right)             :word (rref a-rect rect.bottom))            (#_LineTo :word (rref a-rect rect.right)             :word (+ (rref a-rect rect.top) 2))            (#_InsetRect :ptr a-rect :long #@(1 1))            (WITH-FORE-COLOR $LIGHT-GRAY2              (#_FILLRECT :PTR A-RECT :PTR *BLACK-PATTERN*))            ;(#_INSETRECT A-RECT 1 1)            (FRAME-RECT-3D-WITH-STANDARD-COLORS A-RECT 1 :BOTRIGHT)            ;(#_INSETRECT A-RECT -1 -1)            (#_MoveTo :word (+ (rref a-rect rect.left) 3)             :word (- (rref a-rect rect.bottom) 5))            (with-clip-rect a-rect              (#_DrawString :ptr mi-title)              (#_MoveTo :word (- (rref a-rect :rect.right) (+ 4 11))               :word (- (ash (+ (rref a-rect :rect.bottom) (rref a-rect :rect.top)) -1)                        2))              ; Draw the little triangle.              (#_line :long #@(10 0))              (#_line :long #@(-5 5))              (#_line :long #@(-4 -4))              (#_line :long #@(7 0))              (#_line :long #@(-3 3))              (#_line :long #@(-2 -2))              (#_line :long #@(3 0))              (#_line :long #@(-1 1)))))))    (unless (dialog-item-enabled-p menu)      (rlet ((ps :penstate))        (with-item-rect (rect menu)          (#_InsetRect :ptr rect :long #@(0 -1))          (#_GetPenState :ptr ps)          (#_PenPat :ptr *gray-pattern*)          (#_PenMode :word 11)          (#_PaintRect :ptr rect)          (#_SetPenState :ptr ps))))))                   (defmethod view-draw-contents ((menu alt-3D-pop-up-menu) &aux (items (menu-items menu)))  (let* (         (text (menu-title menu)) ;(dialog-item-text menu))         (ti-rect (pop-up-menu-title-rect menu))         (no-title (equal text ""))         (item-display (pop-up-menu-item-display menu))         (enabled (menu-enabled-p menu))         (colorp (color-or-gray-p menu))         )    (with-focused-dialog-item (menu)        ; take font from item, draw in containers coords -       ; this is the other thing that dialog item gives us      (multiple-value-bind (a d w leading)(view-font-codes-info menu)        (declare (ignore a))        (rlet ((a-rect :rect))          (copy-record (pop-up-menu-rect menu) :rect a-rect)          (let ((mi-title (cond ((eq item-display :selection)                                 (let ((selection (pop-up-menu-default-item menu)))                                   (cond ((null items) "<No Items>")                                         ((zerop selection) "<No selection>")                                         (t (menu-item-title                                             (nth (- selection 1) items))))))                                ((stringp item-display)                                 item-display)                                (t                                  (format nil "~a" item-display)))))            (with-fore-color (if (and (not enabled) colorp)                               *gray-color*                               (part-color menu :menu-title)) ; 21-Jun-91 -wkf              (with-back-color (part-color menu :menu-body) ; 10-Nov-92 -straz                                ;  (#_OffsetRect :ptr a-rect :long #@(0 -1))                (with-fore-color $light-gray2                  (#_FillRect :ptr a-rect :ptr *black-pattern*))                                (#_insetrect a-rect 1 1)                (frame-rect-3d-with-standard-colors a-rect 1 :botright)                (#_insetrect a-rect -1 -1)                (#_FrameRoundRect a-rect 8 8)                                (let ((height (- (rref a-rect :rect.bottom) (rref a-rect :rect.top))))                  (#_moveto (rref a-rect :rect.right) (rref a-rect :rect.top))                  (#_move (- (+ 4 height)) 1)                  (with-fore-color $chiseling-gray                    (#_line 0 (- height 2)))                  (#_move 1 -1)                  (with-fore-color *white-color*                    (#_line 0 (- (- height 3))))                  )                                                (#_InsetRect :ptr a-rect :long #@(1 1))                (let* ((left (+ (rref a-rect rect.left) (max 6 w)))                       (right (rref a-rect rect.right))                       (bottom (rref a-rect rect.bottom)))                  (#_MoveTo :word left :word  (- bottom (+ leading 1 d)))                  (with-clip-rect-intersect a-rect                    (draw-string-crop mi-title (- right left 20))                    (#_MoveTo :word (- right (+ 4 11))                     :word (- (ash (+ bottom (rref a-rect :rect.top)) -1)                              2)))                                    ; Draw the little triangle.                  (draw-triangle menu)                                    )))))                                 (unless (or enabled colorp)          (rlet ((ps :penstate))            (with-item-rect (rect menu)              (#_InsetRect :ptr rect :long #@(0 -1))              (#_GetPenState :ptr ps)              (#_PenPat :ptr *gray-pattern*)              (#_PenMode :word 11)              (#_PaintRect :ptr rect)              (unless no-title (#_PaintRect ti-rect)) ; ??              (#_SetPenState :ptr ps))))        ))))