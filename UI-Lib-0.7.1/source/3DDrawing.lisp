;; -*- mode:lisp; syntax:common-lisp; package:ccl -*-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; system:	U I - L I B;;;; file: 	3DDrawing.lisp;; author: 	Adam Alpern (ala@neural.hampshire.edu);; created: 	04/27/95;;;; Copyright © 1995 Adam Alpern;;;; Please send comments, improvements, or whatever to ala@neural.hampshire.edu.;; If you redistribute this file, please keep this header intact, and;; please send me any changes. I would like to know if you use this utility,;; and if you find it useful.;;;; with-pen-state, frame-rect-3D, and button-dim are from Oodles of Utils.;;;; grayscale constants are from:;;   File:		U3DDrawing.h;;   Contains:		Headers for 3D drawing routines.;;   Written by:		Jamie Osborne, Robin Mair, Faulkner White, Henri Lamiraux;;   Copyright:		© 1992-1993 by Apple Computer, Inc.;;;; hilited-color and disabled-color are from the Common Music distribution;; and the following copyright notice applies to them:;; Copyright (c) 89-94, 95 Heinrich Taube.  All rights reserved.;; Use and copying of this software and preparation of derivative works;; based upon this software are permitted and may be copied as long as ;; no fees or compensation are charged for use, copying, or accessing;; this software and all copies of this software include this copyright;; notice.  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Revision History;; ----------------;; 07/09/96	- added icon transforms to 3d-button-dialog-item;; 04/28/96	- added fill? option to 3d-pad. defaults to nil;; 04/07/96	- added optional emboss arg to draw-centered-text;;		- added misc. view-corners methods for smoother redraws (esp.;;		  in IFT);; 04/06/96	- draw-default-button-outline for 3d-button-dialog-item.;;		  Needs a little tweaking, but not bad.;; 03/15/96	- don't draw inset when disabled. ;;		- tweaked some stuff, can't remember what.;; 03/14/96	- 3d-title-box-dialog-item, when 3d-p, draws w/ view-window frame-colors;;		- new option for 3d-button-dialog-item:  inset? creates an extra;;		  3d effect around the outside of the button if t, 'insetting';;		  it a little bit.;; 01/26/96	- added press-button method for 3d-button-dialog-item;;		- added default-button drawing of outline to 3d-button-dialog-item.;; 01/23/96	- many 3d items now draw with their view-window's  frame-colors,;;		  if they are in a '3d-window-mixin derived window, for;;		  consistency.;; 01/18/96	- added ppat-mixin. 3d-pad, 3d-window, 3d-dialog, 3d-pad;;		  all may take a :ppat initarg now.;; 12/12/95	- added set-dialog-item-text :after for 3d-title-box-dialog-item;; 07/15/95	- added hilited-color, disabled-color, 3d-colors.;; 07/12/95	- draw-centered-text uses part-color :text;; 06/22/95	- added oval-width and oval-height to 3d-button-dialog-item;; 06/20/95	- color-background-window and color-background-dialog;; 06/16/95	- 3D-title-box-dialog-item;; 06/14/95	- fixed draw-centered-text;; 06/13/95	- 3D-button-dialog-item;; 06/12/95	- major revisions. Put everything in ccl package, and;;		  export the important things. Made everything consistent;;		  with "Working in the Third Dimension", from develop;;		  issue 15, from which some of this file is derived.;;		- snarfed frame-rect-3D from oodles-of-utils.;; 04/27/95	- File created.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(in-package :ccl)(eval-when (:compile-toplevel :load-toplevel :execute)    ;(require :graphic-items)     (provide :3DDrawing)    (export '($RGB-8bit-gray1 $RGB-8bit-gray2 $RGB-8bit-gray3 $RGB-8bit-gray4            $RGB-8bit-gray5 $RGB-8bit-gray6 $RGB-8bit-gray7 $RGB-8bit-gray8            $RGB-8bit-gray9 $RGB-8bit-gray10 $RGB-8bit-gray11            $RGB-4bit-gray1 $RGB-4bit-gray2 $RGB-4bit-gray3            $light-gray $light-gray2 $light-gray4 $medium-light-gray $medium-gray            $window-background-gray $chiseling-gray                        $light-violet $medium-violet $dark-violet $dark-violet2                        frame-rect-3D frame-rect-3D-with-standard-colors            frame-rect-3D-with-colors                        color-background-dialog            color-background-window                        3D-dialog             3D-window                      3D-editable-text-dialog-item             3D-static-text-dialog-item            3D-table-dialog-item             3D-sequence-dialog-item            3D-vertical-line-dialog-item             3D-horizontal-line-dialog-item            3D-button-dialog-item            3D-square-button-dialog-item            3D-box-dialog-item            3D-title-box-dialog-item            3D-pad            3D-background-mixin 3D-frame-mixin 3D-field-mixin 3D-window-mixin            button-mixin            hilited-color disabled-color 3D-colors            ))    ; (pushnew :3Ddrawing *features*)  );;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; a few 8 bit color constants(defconstant $light-violet  13421823)		; from Apple Icon Colors(defconstant $medium-violet 10066431)		; from Apple Icon Colors(defconstant $dark-violet   6447496)		(defconstant $dark-violet2  3355494)		; from Apple Icon Colors;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 8Bit gray shade constants(defconstant $RGB-8bit-gray1 61166)		; Light gray(defconstant $RGB-8bit-gray2 56797)		; Slightly darker gray(defconstant $RGB-8bit-gray3 52428)		; Slightly darker gray(defconstant $RGB-8bit-gray4 48059)		; Slightly darker gray(defconstant $RGB-8bit-gray5 43690)		; Slightly darker gray(defconstant $RGB-8bit-gray6 34952)		; Slightly darker gray(defconstant $RGB-8bit-gray7 30583)		; Slightly darker gray(defconstant $RGB-8bit-gray8 21845)		; Slightly darker gray(defconstant $RGB-8bit-gray9 17476)		; Slightly darker gray(defconstant $RGB-8bit-gray10 8738)		; Slightly darker gray(defconstant $RGB-8bit-gray11 4369)		; Dark gray; 4Bit gray shade constants(defconstant $RGB-4bit-gray1 49152)		; Light gray(defconstant $RGB-4bit-gray2 32768)		; Medium gray(defconstant $RGB-4bit-gray3 8192)		; Dark gray; Some constants for drawing grays(defconstant $light-gray  	(make-color $RGB-8bit-gray1 $RGB-8bit-gray1 $RGB-8bit-gray1))(defconstant $light-gray2 	(make-color $RGB-8bit-gray2 $RGB-8bit-gray2 $RGB-8bit-gray2))(defconstant $light-gray4 	(make-color $RGB-8bit-gray4 $RGB-8bit-gray4 $RGB-8bit-gray4))(defconstant $medium-light-gray (make-color $RGB-8bit-gray5 $RGB-8bit-gray5 $RGB-8bit-gray5))(defconstant $medium-gray       (make-color $RGB-8bit-gray6 $RGB-8bit-gray6 $RGB-8bit-gray6))(defconstant $window-background-gray 	$light-gray)(defconstant $chiseling-gray 		$medium-light-gray); Round Rect Oval Constants(defconstant $oval-width  10)(defconstant $oval-height 10);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; hilited-color and disabled-color from Common Music, by Rick Taube(defun hilited-color (color)  (if (= color 0)    #xffffff    (if (= color #xffffff)      0      (let* ((new-color #x000000)             (r (ldb #xff0000 color))             (g (ldb #xff00 color))             (b (ldb #xff color))             (max (max r g b)))        (if (>= max #x40)          (loop for bsp in '(#xff0000 #xff00 #xff)                for c in (list r g b)                do (setf new-color (dpb (- c (ash c -2))                                        bsp new-color)))          (if (> max 0)            (loop for bsp in '(#xff0000 #xff00 #xff)                  for c in (list r g b)                  with comp = (- #xff max)                  do (setf new-color (dpb (round (* (/ c max) comp))                                          bsp new-color)))            (setf new-color #xffffff)))        ;(format t "~&converted color #x~6,'0x to #x~6,'0x" color new-color)        new-color))))(defun disabled-color (color)  (let* ((new-color #x000000)         (r (ldb #xff0000 color))         (g (ldb #xff00 color))         (b (ldb #xff color))         (max (max r g b)))    (loop for bsp in '(#xff0000 #xff00 #xff)          for c in (list r g b)          do (setf new-color (dpb (+ c (ash (- max c) -1)) bsp new-color)))    ;(format t "~&converted color #x~6,'0x to #x~6,'0x" color new-color)    new-color))(defun 3D-colors (&optional color)  (let* ((fill (if color color (user-pick-color)))         (shadow (hilited-color fill))         (hilit (disabled-color fill)))    (if (real-color-equal hilit fill) (setq hilit *white-color*))    (list fill shadow hilit)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; with-pen-state and frame-rect-3D from Oodles of Utils.(defmacro with-pen-state ((&key pnLoc pnSize pnMode pnPat pnPixPat) &body body)  (let ((state (gensym)))    `(rlet ((,state :PenState))       (require-trap #_GetPenState ,state)       (unwind-protect         (progn           ,@(when pnLoc    `((require-trap #_MoveTo (point-h ,pnLoc) (point-v ,pnLoc))))           ,@(when pnSize   `((require-trap #_PenSize (point-h ,pnSize) (point-v ,pnSize))))           ,@(when pnMode   `((require-trap #_PenMode ,pnMode)))           ,@(when pnPat    `((require-trap #_PenPat ,pnPat)))           ,@(when pnPixPat `((require-trap #_PenPixPat ,pnPixPat)))           ,@body)         (require-trap #_SetPenState ,state)))))(defun frame-rect-3D (rect frame-width shadow-position)  ;;Frame's the specified Rect with a 3D look.  ;;Note: this effect only looks right over patterned or colored backgrounds  (let* ((%top   (pref rect :Rect.top   ))         (%left  (pref rect :Rect.left  ))         (%bot   (pref rect :Rect.bottom))         (%right (pref rect :Rect.right )))    (declare (dynamic-extent %right %bot %left %top))    (with-pen-state (:pnSize (make-point frame-width frame-width)                             :pnMode #$patCopy                             :pnLoc (make-point %left (- %bot frame-width)))             ;;left & top edges      (#_PenPat (ecase shadow-position (:topLeft *black-pattern*) (:botRight *white-pattern*)))      (#_LineTo %left %top)      (#_LineTo (- %right frame-width) %top)            ;;right & bottom edges      (#_PenPat (ecase shadow-position (:topLeft *white-pattern*) (:botRight *black-pattern*)))      (#_LineTo (- %right frame-width) (- %bot frame-width))      (#_LineTo %left (- %bot frame-width))            ;;topRight & botLeft corners      (#_PenPat (ecase shadow-position (:topLeft *black-pattern*) (:botRight *white-pattern*)))      (#_PenSize 1 1)      (#_MoveTo (- %right frame-width) (+ %top frame-width -2))      (dotimes (i (1- frame-width)) (#_Line i 0) (#_Move (- i) -1))      (#_MoveTo %left (1- %bot))      (dotimes (i frame-width) (#_Line i 0) (#_Move (- i) -1))))); frame-colors -> (shadow hilit)(defmacro frame-rect-3D-with-colors (frame-colors rect frame-width shadow-position)  `(with-fore-color (first ,frame-colors)     (with-back-color (second ,frame-colors)       (frame-rect-3D ,rect ,frame-width ,shadow-position))))(defmacro frame-rect-3D-with-standard-colors (rect frame-width shadow-position)  `(with-fore-color $chiseling-gray     (with-back-color *white-color*       (frame-rect-3D ,rect ,frame-width ,shadow-position))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass graphic-item-mixin () ())(defmethod point-in-click-region-p ((item graphic-item-mixin) point)  (declare (ignore point))  nil);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 3D frame(defclass 3D-frame-mixin ()   ((frame-colors :initarg :frame-colors :initform (list $chiseling-gray                                                        *white-color*)                 :accessor frame-colors)   (frame-width :initform 1 :accessor frame-width :initarg :frame-width)   (shadow-position :initform :botRight :accessor shadow-position                    :initarg :shadow-position)))(defmethod view-draw-contents :before ((w 3D-frame-mixin))  (multiple-value-bind (topLeft bottomRight)                       (view-corners w)    (rlet ((r :rect :topLeft topLeft              :bottomRight bottomRight))      (frame-rect-3D-with-colors (if (typep (view-window w) '3d-window-mixin)                                   (frame-colors (view-window w))                                   (frame-colors w))                                  r (frame-width w) (shadow-position w)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 3D frames for 'field' dialog items (editable-text-dialog-item, table-dialog-item);; This mixin draws the 3D rect expanded by frame-width pixels _outside_;; of the item.(defclass 3D-field-mixin (3D-frame-mixin)   ((reframe :initarg :reframe :initform t :accessor reframe))  (:default-initargs :shadow-position :topLeft))(defclass 3D-editable-text-dialog-item (3D-field-mixin editable-text-dialog-item) ()  (:default-initargs :shadow-position :topleft))(defclass 3D-table-dialog-item (3D-field-mixin table-dialog-item) ())(defclass 3D-sequence-dialog-item (3D-field-mixin sequence-dialog-item) ())(defclass 3D-static-text-dialog-item (3D-field-mixin static-text-dialog-item) ()  (:default-initargs :reframe nil :shadow-position :botRight))(defmethod view-draw-contents ((w 3D-field-mixin))  (with-slots (frame-width) w    (multiple-value-bind (topLeft bottomRight)                         (view-corners w)      (rlet ((r :rect :topLeft topLeft                :bottomRight bottomRight))        (#_InsetRect r (- frame-width) (- frame-width))        (frame-rect-3D-with-colors (if (typep (view-window w) '3d-window-mixin)                                     (frame-colors (view-window w))                                     (frame-colors w))                                   r (frame-width w) (shadow-position w))        (call-next-method)        (when (reframe w)          (#_InsetRect r frame-width frame-width)          (with-fore-color *black-color*            (#_FrameRect r))))))); this stops the background window color from showing through; when one of these is installed in a 3d-window.(defmethod view-draw-contents :before ((view table-dialog-item))  (ccl::with-item-rect (r view)     (#_EraseRect r)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass 3d-pad (ppat-mixin 3d-frame-mixin dialog-item)   ((bg-color :initarg :bg-color :initform *light-gray-color*             :accessor bg-color)   (frame? :initarg :frame? :initform nil :accessor frame?)   (fill?  :initarg :fill?  :initform nil :accessor fill?)))(defmethod view-draw-contents :Around ((view 3d-pad))  (rlet ((r :rect :topleft (view-position view)            :bottomright (add-points (view-position view)                                     (view-size view))))    (when (fill? view)      (if (ppat view)        (#_fillcrect r (ppat view))        (with-fore-color (or (part-color view :body)                              (bg-color view))          (#_fillrect r *black-pattern*))))    (if (frame? view)                 (progn (with-fore-color *black-color*               (#_framerect r))             (#_insetrect r 1 1)             (frame-rect-3D-with-colors (frame-colors view)                                         r (frame-width view)                                         (shadow-position view)))      (frame-rect-3D-with-colors (frame-colors view)                                  r (frame-width view)                                  (shadow-position view)))))    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass ppat-mixin () ((ppat :initarg :ppat :initform nil :accessor ppat)))(defmethod view-draw-contents :before ((w ppat-mixin))  (when (ppat w)    (multiple-value-bind (topLeft bottomRight)                         (view-corners w)      (rlet ((r :rect :topLeft topLeft                :bottomRight bottomRight))        (#_fillcrect r (ppat w))))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 3D windows(defclass 3d-window-mixin (ppat-mixin 3D-frame-mixin)   ((bg-color :initarg :bg-color :initform $window-background-gray             :accessor bg-color))  (:default-initargs :color-p t :shadow-position :botRight :frame-width 1))(defmethod initialize-instance :after ((w 3d-window-mixin) &rest args)  (declare (ignore args))  (unless (ppat w)    (set-part-color w :content (bg-color w))))(defmethod (setf bg-color) :after ((w 3d-window-mixin) color)  (set-part-color w :content color))(defclass 3D-dialog (3d-window-mixin color-dialog) ())(defclass 3D-window (3d-window-mixin window) ());;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 3D lines(defclass 3D-line-dialog-item (graphic-item-mixin dialog-item)  ((frame-colors :initarg :frame-colors :initform (list $chiseling-gray                                                        *white-color*)                 :accessor frame-colors)   (frame-width :initform 1 :accessor frame-width :initarg :frame-width)   (shadow-position :initform :botRight :accessor shadow-position                    :initarg :shadow-position)   (3d-p :initarg :3d-p :initform t :accessor 3d-p))  (:default-initargs :frame-width 1 :shadow-position :topLeft))(defclass 3D-horizontal-line-dialog-item (3D-line-dialog-item) ())(defclass 3D-vertical-line-dialog-item (3D-line-dialog-item) ())(defmethod view-draw-contents ((w 3D-line-dialog-item))  (multiple-value-bind (topLeft bottomRight)                       (view-corners w)    (rlet ((r :rect :topLeft topLeft              :bottomRight bottomRight))      (if (3d-p w)        (frame-rect-3D-with-colors (if (typep (view-window w) '3d-window-mixin)                                     (frame-colors (view-window w))                                     (frame-colors w))                                    r (frame-width w) (shadow-position w))        (#_framerect r)))))(defmethod initialize-instance :after ((item 3D-horizontal-line-dialog-item)                                        &rest args)  (declare (ignore args))  (set-view-size item (make-point (point-h (view-size item))                                   (if (3d-p item)                                     (* (frame-width item) 2)                                    (frame-width item)))))(defmethod initialize-instance :after ((item 3D-vertical-line-dialog-item)                                        &rest args)  (declare (ignore args))  (set-view-size item (make-point (if (3d-p item) (* (frame-width item) 2)                                       (frame-width item))                             (point-v (view-size item)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 3D 'box'(defclass 3D-box-dialog-item (3D-frame-mixin graphic-item-mixin dialog-item) ())(defmethod view-draw-contents :Around ((view 3D-box-dialog-item))  (with-focused-view view     (with-fore-color $chiseling-gray      (ccl::frame-rect view #@(0 0) (subtract-points (view-size view) #@(1 1))))    (with-fore-color *white-color*      (ccl::frame-rect view #@(1 1) (view-size view)))));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 3D Buttons; snarfed from oodles-of-utils.; subclasses *must* specialize hilite-view(defclass button-dim (#+:ccl-3 default-button-mixin ) ())(defclass button-mixin (button-dim) ())(defmethod view-click-event-handler ((di button-dim) where)  (when (with-focused-view (view-container di)           (button-track di where))    (call-next-method)))(defmethod button-hilite ((di button-dim) hilite-flag)  (hilite-view di hilite-flag))(defmethod button-track ((di button-dim) initial-mouse-position)  ;;returns t or nil indicating if the mouse was realeased in the button  (let ((inverted (point-in-click-region-p di initial-mouse-position)))    (when inverted (button-hilite di t))    (loop      (unless (#_WaitMouseUp)        (when inverted (button-hilite di nil))        (return inverted))      (if (point-in-click-region-p            di (view-mouse-position (view-container di)))        (unless inverted (button-hilite di t) (setf inverted t))        (when inverted (button-hilite di nil) (setf inverted nil))))))(defgeneric hilite-view (view hilite-flag)); color parameters -> fill shadow highlight(defparameter *3d-button-hilited-colors*  (list $medium-gray        (make-color $rgb-8bit-gray9 $rgb-8bit-gray9 $rgb-8bit-gray9)        (make-color $rgb-8bit-gray3 $rgb-8bit-gray3 $rgb-8bit-gray3)))(defparameter *3d-button-normal-colors*  (list $light-gray2         $medium-gray         *white-color*))(defclass 3D-button-dialog-item (ppat-mixin cl-user::cicn-dialog-item-mixin                                  button-dim                                 dialog-item)   ((colors :initarg :colors :initform *3d-button-normal-colors*            :accessor colors)   (hilited-colors :initarg :hilited-colors :initform *3d-button-hilited-colors*                    :accessor hilited-colors)   (square-p :initarg :square-p :initform nil :accessor square-p)   (embossed? :initarg :embossed? :initform nil :accessor embossed?)   (frame-width :initform 1 :accessor frame-width :initarg :frame-width)   (shadow-position :initform :botRight :accessor shadow-position                    :initarg :shadow-position)   (frame? :initarg :frame? :initform t :accessor frame?)   (hilited-p :initarg :hilited-p :initform nil :accessor hilited-p)   (dont-draw-text :initarg :dont-draw-text :initform nil :accessor dont-draw-text)   (default-button :initarg :default-button :initform nil :accessor default-button)   (oval-width :initarg :oval-width :initform 4 :accessor oval-width)   (oval-height :initarg :oval-height :initform 4 :accessor oval-height)   (inset? :initarg :inset? :initform nil :accessor inset?)   ))(defclass 3D-square-button-dialog-item (3d-button-dialog-item) ()  (:Default-initargs :square-p t))(defmethod press-button ((button 3d-button-dialog-item))  (with-focused-view button    (ccl::button-hilite button t)    (view-focus-and-draw-contents button)    (let ((time (+ 4 (%get-long (%int-to-ptr #x16a)))))      (ccl::while (< (%get-long (%int-to-ptr #x16a)) time)))    (ccl::hilite-view button nil)    (view-focus-and-draw-contents button)          (dialog-item-action button)))(defmethod view-draw-contents ((di 3D-button-dialog-item))  (let (fill-color highlight-color shadow-color transform)    (cond ((null (dialog-item-enabled-p di)) 	; dimmed           (setf fill-color      (first (colors di))                 shadow-color    nil                 highlight-color nil                 transform #$ttDisabled))          ((hilited-p di)			; hilited           (setf fill-color      (first (hilited-colors di))                 shadow-color    (second (hilited-colors di))                 highlight-color (third (hilited-colors di))                 transform #$ttSelected))          (t 					; normal           (setf fill-color      (first  (colors di))                 shadow-color    (second (colors di) )                 highlight-color (third  (colors di))                 transform #$ttNone)           ))    (setf (cl-user::transform di) transform)    (ccl::with-item-rect (r di)      (#_eraserect r)      (when (and (inset? di) (square-p di)) (#_InsetRect r 1 1))      ;; ¥ Fill the round rect with the color      (if (ppat di)        (#_fillcrect r (ppat di))        (with-fore-color fill-color          (if (square-p di)            (#_PaintRect r)            (#_PaintRoundRect r $oval-width $oval-height))))      ;; ¥ Inset the area in preparation for the drawing of the buttons content      (when (frame? di) (#_InsetRect r 1 1))      (when (dialog-item-enabled-p di)	; don't draw the 3D effect unless we're enabled         (with-fore-color shadow-color          (with-back-color highlight-color            (frame-rect-3d r (frame-width di)                            (shadow-position di)))))            (#_InsetRect r -1 -1)      (with-fore-color (if (null (dialog-item-enabled-p di))                          $medium-gray                         *black-color*)        ;; ¥ Frame button with a black border or gray if it's dimmed        (when (frame? di)          (cond ((square-p di)                 (#_FrameRect r)                 (when (and (inset? di)                            (dialog-item-enabled-p di))                   (#_InsetRect r -1 -1)                   (frame-rect-3D-with-colors                     (if (typep (view-window di) '3d-window-mixin)                      (frame-colors (view-window di))                      (list $chiseling-gray *white-color*) )                     r 1 :topleft)))                (t                  (#_FrameRoundRect r (oval-width di) (oval-height di))))          ))))  (unless (dont-draw-text di) (draw-centered-text di                                                   (dialog-item-text di)                                                   :emboss (embossed? di)))  (maybe-draw-default-button-outline di))(defmethod draw-default-button-outline ((item 3d-button-dialog-item))  (when (installed-item-p item)    (with-focused-dialog-item (item)      (let ((grayp (not (dialog-item-enabled-p item)))            (off 5)            fill-color highlight-color shadow-color frame-colors)        (declare (dynamic-extent frame-colors fill-color highlight-color                                 shadow-color off grayp))        (setf fill-color      (first (hilited-colors item))              shadow-color    (second (hilited-colors item))              highlight-color (third (hilited-colors item)))        (setf frame-colors (list shadow-color highlight-color))        (without-interrupts         (with-item-rect (rect item)           (#_insetRect rect -4 -4)           (if grayp                          (with-pen-saved               (#_pensize 4 4)               (with-fore-color fill-color                 (if (square-p item)                   (#_framerect rect)                   (#_frameroundrect rect (+ off (oval-width item))                    (+ off (oval-height item))))))                          (with-pen-saved               (#_pensize 4 4)               (with-fore-color fill-color                 (if (square-p item)                   (#_framerect rect)                   (#_frameroundrect rect (+ off (oval-width item))                    (+ off (oval-height item)))))               (#_pensize 1 1)                                (#_insetrect rect 1 1)               (frame-rect-3d-with-colors frame-colors rect 1 :botright)               (#_insetrect rect 2 2)               (frame-rect-3d-with-colors frame-colors rect 1 :topleft)               (#_insetrect rect -3 -3)               (with-fore-color 0                  (if (square-p item)                   (#_framerect rect)                   (#_frameroundrect rect (+ off (oval-width item))                    (+ off (oval-height item)))))               ))           ))))))(defun draw-string (text left top &key                            (emboss nil)                            (emboss-color *white-color*))  (with-returned-pstrs ((s text))    (when emboss      (#_moveto (1+ left) (1+ top))      (with-fore-color emboss-color        (#_DrawString s)))    (#_moveto left top)    (#_DrawString s)))(defmethod draw-centered-text ((di dialog-item) text                                 &key (emboss nil)                                (emboss-color *white-color*))  (when (and (installed-item-p di)              (not (equalp text "")))    (multiple-value-bind (ascent descent max-width leading)                         (font-info (view-font di))      (declare (ignore max-width))      (let* ((textHeight (+ ascent descent leading))             (width (string-width text (view-font di)))             (h (point-h (view-size di)))             (v (point-v (view-size di)))             (left (truncate (/ (- h width) 2)))             (top  (truncate (/ (- v textHeight) 2))))        (with-focused-view di           (with-fore-color (if (dialog-item-enabled-p di)                              (or (part-color di :text) *black-color*)                             $medium-light-gray)            (draw-string text left  (+ top ascent)                         :emboss emboss :emboss-color emboss-color))          )        ))))        (defmethod hilite-view ((view 3d-button-dialog-item) hilite-flag)  (cond (hilite-flag          (setf (shadow-position view) :topLeft)         #+ccl-3(setf (cl-user::transform view) #$ttSelected)         (setf (hilited-p view) t)         (view-draw-contents view))              (t         (setf (shadow-position view) :botRight)         #+ccl-3(setf (cl-user::transform view) #$ttNone)         (setf (hilited-p view) nil)         (view-draw-contents view))        ));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defmethod view-corners ((item 3d-button-dialog-item))  (if (default-button-p item)    (multiple-value-call #'inset-corners #@(-4 -4) (call-next-method))    (call-next-method)));;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;(defclass 3D-title-box-dialog-item (3D-frame-mixin graphic-item-mixin dialog-item)   ((title-box-width :initform 0 :accessor title-box-width)   (frame-color :initarg :frame-color :initform *dark-gray-color*                :accessor frame-color)   (frame-pat :initarg :frame-pat :initform *black-pattern*              :accessor frame-pat)   ; color-p is only here until I can find out where everything using it is.   (color-p :initarg :color-p :initform nil :accessor color-p)   (3d-p :initarg :3d-p :initform nil :accessor 3d-p)))(defmethod install-view-in-window ((item 3D-title-box-dialog-item) dialog)  (call-next-method)  (let* ((topleft (view-position item))         (bottomright (add-points topleft (view-size item))))    (rlet ((r :rect :topleft topleft              :bottomright bottomright))      (rset r :rect.top (- (rref r :rect.top) 8))      (#_InvalRect :ptr r)))  (setf (title-box-width item)        (string-width (dialog-item-text item)                      (or (view-font item)                          (view-font dialog)))))(defmethod set-dialog-item-text :after ((item 3d-title-box-dialog-item) string)  (let* ((topleft (view-position item))         (bottomright (add-points topleft (view-size item)))         (dialog (view-window item)))    (rlet ((r :rect :topleft topleft              :bottomright bottomright))      (rset r :rect.top (- (rref r :rect.top) 8))      (#_InvalRect :ptr r))    (setf (title-box-width item)          (string-width string                        (or (view-font item)                            (view-font dialog))))))    (defmethod view-draw-contents :Around ((item 3D-title-box-dialog-item))  (with-focused-view item     ; draw the frame    (cond ((or (color-p item) (3d-p item))           (let (shadow hilit)             (if (typep (view-window item) '3d-window-mixin)               (setf shadow (first (frame-colors (view-window item)))                     hilit (second (frame-colors (view-window item))))               (setf shadow $chiseling-gray                     hilit *white-color*))             (with-fore-color shadow               (ccl::frame-rect item #@(0 0)                                 (subtract-points (view-size item) #@(1 1))))             (with-fore-color hilit               (ccl::frame-rect item #@(1 1) (view-size item)))))          (t           (with-pen-saved             (#_PenPat (or (frame-pat item) *black-pattern*))             (with-fore-color (or (part-color item :frame) (frame-color item))               (ccl::frame-rect item #@(0 0) (view-size item)))))))  ; erase the area around the title and draw the title  (with-focused-view (view-container item)    (let* ((topleft (view-position item))           (bottomright (add-points topleft (view-size item))))      (with-pstrs ((p-title (dialog-item-text item)))        (rlet ((r :rect :topleft topleft                  :bottomright bottomright))                  (rset r rect.left (+ (rref r rect.left) 4))          (rset r rect.bottom (+ (rref r rect.top) 2))          (rset r rect.right (+ (rref r rect.left)                                4                                (title-box-width item)))          (#_EraseRect :ptr r))        (#_MoveTo :long (add-points topleft #@(6 5)))        (with-fore-color (or (part-color item :text) 0)          (#_DrawString :ptr p-title))))))